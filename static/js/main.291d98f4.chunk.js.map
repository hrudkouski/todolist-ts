{"version":3,"sources":["serviceWorker.ts","api/todoList-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","features/Error404/Error404.tsx","app/App.tsx","index.tsx","features/Error404/Error404.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","todolistId","delete","put","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppError","setAppStatus","handleServerNetworkError","error","message","SET_IS_LOGGED_IN","initialState","isLoggedIn","setIsLoggedInAC","value","type","SET_STATUS","SET_ERROR","SET_INITIALIZED","status","isInitialized","initializeAppTC","then","res","resultCode","catch","finally","SET_TODOLISTS","ADD_TODOLIST","REMOVE_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","CHANGE_TODOLIST_ENTITY_STATUS","changeTodolistEntityStatusAC","todoListID","entityStatus","id","fetchTodolistsTC","todolists","addTodolistTC","todolist","item","removeTodolistTC","changeTodoListTitleTC","newTitle","newTodoListTitle","changeTodoListTitleAC","SET_TASKS","ADD_TASK","REMOVE_TASK","UPDATE_TASK","fetchTasksTC","tasks","setTasksAC","items","addTaskTC","task","removeTaskTC","taskID","removeTasksAC","updateTaskTC","domainModel","getState","find","el","apiModel","description","priority","startDate","deadline","updateTaskAC","rootReducer","combineReducers","state","action","todoListId","filter","map","t","copyState","forEach","todoLists","tl","app","auth","store","createStore","applyMiddleware","thunkMiddleWare","AddItemForm","React","memo","props","addItem","disabled","useState","setError","setTitle","onClickAddItem","trimmedTitle","trim","TextField","size","onKeyPress","e","key","onChange","currentTarget","label","variant","helperText","IconButton","color","onClick","AddBox","EditableSpan","changeTitle","editMode","setEditMode","onEditMode","useCallback","offEditMode","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","removeTaskHandler","onChangeHandler","newIsDoneValue","checked","Completed","New","changeTaskTitleHandler","className","Checkbox","Delete","Todolist","todoList","deleteTodoList","changeFilter","addTask","changeTodolistTitle","demo","useDispatch","useEffect","onClickAllFilter","onClickActiveFilter","onClickCompletedFilter","onClickDeleteTodoList","changeTodolistTitleHandler","addTaskHandler","tasksForTodolist","tasksFor","s","style","listStyle","paddingLeft","Button","marginLeft","TodolistsList","useSelector","addTodoList","newFilter","changeTodoListFilterAC","todoListsComponents","Grid","Paper","elevation","padding","container","spacing","justifyContent","to","Alert","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","logIn","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","rel","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","Error404","wrapper","errorText","errorText2","App","logOutHandler","position","backgroundColor","edge","aria-label","Menu","fixed","path","render","exact","from","display","height","width","alignItems","disableShrink","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","module","exports"],"mappings":"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","file":"static/js/main.291d98f4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3af7a44d-0a6b-4bf7-b34b-b5730fa5756f'\r\n    }\r\n})\r\n\r\n// Types\r\nexport type CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsError: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TasksType = {\r\n    description: string | null\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    description: string | null\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\ntype TasksResponseType = {\r\n    error: null | string\r\n    items: TasksType[]\r\n    totalCount: number\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type AuthMeResponseType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\n// Api\r\nexport const todoListApi = {\r\n    getToDoList() {\r\n        return instance.get<TodoListType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoListType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolistTitle(title: string, todolistId: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n    getTasksForTodolist(todolistId: string) {\r\n        return instance.get<TasksResponseType>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    createTaskForTodolist(title: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{ item: TasksType }>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    deleteTaskFromTodolist(taskId: string, todolistId: string,) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    updateTaskForTodolist(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<TasksType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\nexport const authAPI = {\r\n    logIn(data: LoginParamsType) {\r\n        return instance.post<CommonResponseType<{ userId: number }>>('auth/login', data)\r\n    },\r\n    authMe() {\r\n        return instance.get<CommonResponseType<AuthMeResponseType>>('auth/me')\r\n    },\r\n    logOut() {\r\n        return instance.delete<CommonResponseType>('auth/login')\r\n    },\r\n}\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {CommonResponseType} from \"../api/todoList-api\";\r\nimport {setAppError, SetAppErrorAT, setAppStatus, SetAppStatusAT} from \"../app/app-reducer\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: CommonResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppError(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppError('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppError(error.message))\r\n    dispatch(setAppStatus('failed'))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorAT | SetAppStatusAT>\r\n","import {authAPI, LoginParamsType} from \"../../api/todoList-api\";\r\nimport {AppThunkType} from \"../../app/store\";\r\nimport {setAppStatus} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n// Actions\r\nconst SET_IS_LOGGED_IN = 'todolist-ts/login-reducer/SET_IS_LOGGED_IN';\r\n\r\n// Types\r\ntype InitialStateType = typeof initialState\r\nexport type LoginActionsType = ReturnType<typeof setIsLoggedInAC>\r\n\r\n//Initial State\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\n// Reducer\r\nexport const loginReducer = (state = initialState, action: LoginActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_IS_LOGGED_IN:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: action.value\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: SET_IS_LOGGED_IN, value} as const)\r\n\r\n// Thunk Creators\r\nexport const logIn = (values: LoginParamsType): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        authAPI.logIn(values)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const logOut = (): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        authAPI.logOut()\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(false))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\n","import {authAPI} from \"../api/todoList-api\";\r\nimport {AppThunkType} from \"./store\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\n\r\n// Actions\r\nconst SET_STATUS = 'todolist-ts/app-reducer/SET_STATUS';\r\nconst SET_ERROR = 'todolist-ts/app-reducer/SET_ERROR';\r\nconst SET_INITIALIZED = 'todolist-ts/app-reducer/SET_INITIALIZED';\r\n\r\n// Types\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\r\nexport type ErrorType = null | string;\r\nexport type SetAppErrorAT = ReturnType<typeof setAppError>;\r\nexport type SetAppStatusAT = ReturnType<typeof setAppStatus>;\r\nexport type SetInitializedStatusAT = ReturnType<typeof setInitializedStatus>;\r\nexport type AppActionsType = SetAppErrorAT | SetAppStatusAT | SetInitializedStatusAT;\r\nexport type InitialStateType = typeof initialState;\r\n\r\n//Initial State\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as ErrorType,\r\n    isInitialized: false,\r\n}\r\n\r\n// Reducer\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case SET_ERROR:\r\n            return {...state, error: action.error}\r\n        case SET_INITIALIZED:\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setAppError = (error: ErrorType) => ({type: SET_ERROR, error}) as const;\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: SET_STATUS, status}) as const;\r\nexport const setInitializedStatus = (isInitialized: boolean) => ({type: SET_INITIALIZED, isInitialized}) as const;\r\n\r\n// Thunk Creators\r\nexport const initializeAppTC = (): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        authAPI.authMe()\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n            .finally(() => {\r\n                dispatch(setInitializedStatus(true))\r\n            })\r\n    }\r\n}\r\n","import {todoListApi, TodoListType} from \"../../api/todoList-api\";\r\nimport {RequestStatusType, setAppStatus} from \"../../app/app-reducer\";\r\nimport {AppThunkType} from \"../../app/store\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n// Actions\r\nexport const SET_TODOLISTS = 'todolist-ts/todolists-reducer/SET_TODOLISTS';\r\nexport const ADD_TODOLIST = 'todolist-ts/todolists-reducer/ADD_TODOLIST';\r\nexport const REMOVE_TODOLIST = 'todolist-ts/todolists-reducer/REMOVE_TODOLIST';\r\nconst CHANGE_TODOLIST_TITLE = 'todolist-ts/todolists-reducer/CHANGE_TODOLIST_TITLE';\r\nconst CHANGE_TODOLIST_FILTER = 'todolist-ts/todolists-reducer/CHANGE_TODOLIST_FILTER';\r\nconst CHANGE_TODOLIST_ENTITY_STATUS = 'todolist-ts/todolists-reducer/CHANGE_TODOLIST_ENTITY_STATUS';\r\n\r\n// Types\r\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\r\nexport type AddTodoListAT = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodoListAT = ReturnType<typeof removeTodolistAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type TodolistsActionsType =\r\n    | SetTodolistsAT\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\n// Initial State\r\nconst initialState: TodoListDomainType[] = [];\r\n\r\n// Reducer\r\nexport const todoListsReducer = (state: TodoListDomainType[] = initialState, action: TodolistsActionsType): TodoListDomainType[] => {\r\n    switch (action.type) {\r\n        case SET_TODOLISTS: {\r\n            return action.todolists.map(el => ({...el, filter: \"all\", entityStatus: \"idle\"}));\r\n        }\r\n        case ADD_TODOLIST:\r\n            return [{...action.todolist, filter: 'all', entityStatus: \"idle\"}, ...state]\r\n        case REMOVE_TODOLIST:\r\n            return state.filter(el => el.id !== action.id)\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl);\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case CHANGE_TODOLIST_ENTITY_STATUS:\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setTodolistsAC = (todolists: TodoListType[],) => {\r\n    return {type: SET_TODOLISTS, todolists} as const\r\n}\r\nexport const addTodolistAC = (todolist: TodoListType) => {\r\n    return {type: ADD_TODOLIST, todolist} as const\r\n}\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {type: REMOVE_TODOLIST, id: todolistId} as const\r\n}\r\nexport const changeTodoListTitleAC = (todoListID: string, newTodoListTitle: string) => {\r\n    return {type: CHANGE_TODOLIST_TITLE, id: todoListID, title: newTodoListTitle} as const\r\n}\r\nexport const changeTodoListFilterAC = (todoListID: string, newFilter: FilterValuesType) => {\r\n    return {type: CHANGE_TODOLIST_FILTER, id: todoListID, filter: newFilter} as const\r\n}\r\nexport const changeTodolistEntityStatusAC = (todoListID: string, entityStatus: RequestStatusType) => {\r\n    return {type: CHANGE_TODOLIST_ENTITY_STATUS, id: todoListID, entityStatus} as const\r\n}\r\n\r\n// Thunk Creators\r\nexport const fetchTodolistsTC = (): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListApi.getToDoList()\r\n            .then((res) => {\r\n                    dispatch(setTodolistsAC(res.data))\r\n                    dispatch(setAppStatus('succeeded'))\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListApi.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todoListID: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'));\r\n        dispatch(changeTodolistEntityStatusAC(todoListID, 'loading'))\r\n        todoListApi.deleteTodolist(todoListID)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todoListID))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                    dispatch(changeTodolistEntityStatusAC(todoListID, 'failed'))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC(todoListID, 'failed'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodoListTitleTC = (newTitle: string, todoListID: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'));\r\n        dispatch(changeTodolistEntityStatusAC(todoListID, 'loading'))\r\n        todoListApi.updateTodolistTitle(newTitle, todoListID)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodoListTitleAC(todoListID, newTitle))\r\n                    dispatch(setAppStatus('succeeded'));\r\n                    dispatch(changeTodolistEntityStatusAC(todoListID, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                    dispatch(changeTodolistEntityStatusAC(todoListID, 'failed'))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC(todoListID, 'failed'))\r\n            })\r\n    }\r\n}\r\n","import {\r\n    SetTodolistsAT, AddTodoListAT, RemoveTodoListAT,\r\n    SET_TODOLISTS, ADD_TODOLIST, REMOVE_TODOLIST, changeTodolistEntityStatusAC,\r\n} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TasksType, todoListApi, UpdateTaskModelType} from \"../../api/todoList-api\";\r\nimport {AppRootStateType, AppThunkType} from \"../../app/store\";\r\nimport {setAppStatus} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n// Actions\r\nconst SET_TASKS = 'todolist-ts/tasks-reducer/SET_TASKS';\r\nconst ADD_TASK = 'todolist-ts/tasks-reducer/ADD_TASK';\r\nconst REMOVE_TASK = 'todolist-ts/tasks-reducer/REMOVE_TASK';\r\nconst UPDATE_TASK = 'todolist-ts/tasks-reducer/UPDATE_TASK';\r\n\r\n// Types\r\nexport type UpdateDomainTaskModelType = {\r\n    description?: string | null\r\n    title?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string | null\r\n    deadline?: string | null\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\nexport type TasksActionsType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | SetTodolistsAT\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT;\r\n\r\n//Initial State\r\nconst initialState: TaskStateType = {};\r\n\r\n// Reducer\r\nexport const tasksReducer = (state = initialState, action: TasksActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {...state, [action.todoListID]: action.tasks}\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]],\r\n            }\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].filter((el) => el.id !== action.taskID)\r\n            };\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case SET_TODOLISTS: {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(el => {\r\n                copyState[el.id] = [];\r\n            })\r\n            return copyState\r\n        }\r\n        case ADD_TODOLIST:\r\n            return {...state, [action.todolist.id]: []}\r\n        case REMOVE_TODOLIST:\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setTasksAC = (tasks: TasksType[], todoListID: string) => {\r\n    return {type: SET_TASKS, tasks, todoListID,} as const\r\n}\r\nexport const addTaskAC = (task: TasksType) => {\r\n    return {type: ADD_TASK, task,} as const\r\n}\r\nexport const removeTasksAC = (taskID: string, todoListID: string) => {\r\n    return {type: REMOVE_TASK, taskID: taskID, todoListID: todoListID,} as const\r\n}\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListID: string) => {\r\n    return {type: UPDATE_TASK, taskId, model, todoListID,} as const\r\n}\r\n\r\n// Thunk Creators\r\nexport const fetchTasksTC = (todoListID: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListApi.getTasksForTodolist(todoListID)\r\n            .then((res) => {\r\n                dispatch(setTasksAC(res.data.items, todoListID))\r\n                dispatch(setAppStatus('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTaskTC = (title: string, todoListID: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        todoListApi.createTaskForTodolist(title, todoListID)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n            })\r\n    }\r\n}\r\nexport const removeTaskTC = (taskID: string, todoListID: string): AppThunkType => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todoListID, 'loading'))\r\n        todoListApi.deleteTaskFromTodolist(taskID, todoListID)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTasksAC(taskID, todoListID))\r\n                    dispatch(setAppStatus('succeeded'))\r\n                    dispatch(changeTodolistEntityStatusAC(todoListID, 'succeeded'))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                    dispatch(changeTodolistEntityStatusAC(todoListID, 'failed'))\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTodolistEntityStatusAC(todoListID, 'failed'))\r\n            })\r\n    }\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todoListID: string): AppThunkType => {\r\n    return (dispatch, getState: () => AppRootStateType) => {\r\n        const allTasksFromState = getState().tasks;\r\n        const task = allTasksFromState[todoListID].find(el => el.id === taskId);\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                description: task.description,\r\n                title: task.title,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...domainModel\r\n            };\r\n            dispatch(setAppStatus('loading'))\r\n            todoListApi.updateTaskForTodolist(todoListID, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todoListID))\r\n                        dispatch(setAppStatus('succeeded'))\r\n                    } else {\r\n                        handleServerAppError(res.data, dispatch);\r\n                        dispatch(changeTodolistEntityStatusAC(todoListID, 'failed'))\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    handleServerNetworkError(error, dispatch)\r\n                    dispatch(changeTodolistEntityStatusAC(todoListID, 'failed'))\r\n                })\r\n        }\r\n    }\r\n}\r\n","import {TasksActionsType, tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {TodolistsActionsType, todoListsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleWare, {ThunkAction} from \"redux-thunk\";\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\nimport {LoginActionsType, loginReducer} from \"../features/Login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer,\r\n    app: appReducer,\r\n    auth: loginReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleWare));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionType =\r\n    | AppActionsType\r\n    | TodolistsActionsType\r\n    | TasksActionsType\r\n    | LoginActionsType;\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    AppActionType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n    const {\r\n        addItem,\r\n        disabled = false\r\n    } = props;\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle)\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    };\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem();\r\n        }\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                disabled={disabled}\r\n                value={title}\r\n                onKeyPress={onKeyPressAddItem}\r\n                onChange={onChangeTitle}\r\n                error={!!error}\r\n                label={'Title'}\r\n                variant={\"outlined\"}\r\n                helperText={error && 'Title is required'}\r\n            />\r\n            <IconButton\r\n                disabled={disabled}\r\n                color={'primary'}\r\n                onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useState, ChangeEvent, KeyboardEvent, useCallback} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanType = {\r\n    value: string\r\n    changeTitle: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n\r\n    const {\r\n        value,\r\n        changeTitle,\r\n        disabled = false\r\n    } = props;\r\n\r\n    const [title, setTitle] = useState<string>(value)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const onEditMode = useCallback(() => {\r\n        setEditMode(true)\r\n        changeTitle(value)\r\n    }, [changeTitle, value])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        changeTitle(title);\r\n    }, [changeTitle, title])\r\n\r\n    const onPressEnterOffEditMode = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onPressEnterOffEditMode}\r\n                autoFocus\r\n                disabled={disabled}\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{value}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TasksType} from \"../../../../api/todoList-api\";\r\n\r\nexport type TasksPropsType = {\r\n    task: TasksType\r\n    removeTask: (taskID: string, todoListID: string) => void\r\n    todoListID: string\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    disabled?: string\r\n}\r\n\r\nexport const Task = React.memo((props: TasksPropsType) => {\r\n\r\n    const {\r\n        task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle,\r\n        todoListID,\r\n        disabled,\r\n    } = props;\r\n\r\n    const removeTaskHandler = useCallback(() => removeTask(task.id, todoListID), [task.id, todoListID, removeTask])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            const newIsDoneValue = e.currentTarget.checked;\r\n            changeTaskStatus(task.id,\r\n                newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n                todoListID)\r\n        }, [task.id, todoListID, changeTaskStatus]\r\n    )\r\n\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title, todoListID)\r\n    }, [task.id, todoListID, changeTaskTitle])\r\n\r\n    return (\r\n            <div className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={task.status === TaskStatuses.Completed}\r\n                onChange={onChangeHandler}\r\n                color={'primary'}\r\n            />\r\n            <EditableSpan\r\n                disabled={disabled === 'loading'}\r\n                changeTitle={changeTaskTitleHandler}\r\n                value={task.title}/>\r\n            <IconButton\r\n                disabled={disabled === 'loading'}\r\n                onClick={removeTaskHandler}\r\n            >\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TasksType} from \"../../../api/todoList-api\";\r\nimport {FilterValuesType, TodoListDomainType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\nimport s from './Todolist.module.css'\r\n\r\ntype TodolistPropsType = {\r\n    todoList: TodoListDomainType\r\n    tasks: Array<TasksType>\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    deleteTodoList: (todoListID: string) => void\r\n    removeTask: (taskID: string, todoListID: string) => void;\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void;\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTodolistTitle: (newTitle: string, todoListID: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n\r\n    const {\r\n        todoList,\r\n        tasks,\r\n        changeTaskTitle,\r\n        deleteTodoList,\r\n        removeTask,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        changeTodolistTitle,\r\n        demo = false,\r\n    } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo) return;\r\n        dispatch(fetchTasksTC(todoList.id));\r\n    }, [todoList.id, dispatch, demo])\r\n\r\n    const onClickAllFilter = useCallback(() => changeFilter('all', todoList.id), [changeFilter, todoList.id])\r\n\r\n    const onClickActiveFilter = useCallback(() => changeFilter('active', todoList.id), [changeFilter, todoList.id])\r\n\r\n    const onClickCompletedFilter = useCallback(() => changeFilter('completed', todoList.id), [changeFilter, todoList.id])\r\n\r\n    const onClickDeleteTodoList = useCallback(() => deleteTodoList(todoList.id), [deleteTodoList, todoList.id])\r\n\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(title, todoList.id)\r\n    }, [changeTodolistTitle, todoList.id])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todoList.id)\r\n    }, [addTask, todoList.id])\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (todoList.filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (todoList.filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n\r\n    const tasksFor = tasksForTodolist.map(t => {\r\n        return <Task\r\n            disabled={todoList.entityStatus}\r\n            task={t}\r\n            key={t.id}\r\n            removeTask={removeTask}\r\n            todoListID={todoList.id}\r\n            changeTaskStatus={changeTaskStatus}\r\n            changeTaskTitle={changeTaskTitle}\r\n        />\r\n    })\r\n\r\n\r\n    return (\r\n        <div className={s.todolists}>\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan\r\n                        value={todoList.title}\r\n                        changeTitle={changeTodolistTitleHandler}\r\n                        disabled={todoList.entityStatus === 'loading'}\r\n                    />\r\n                    <IconButton\r\n                        disabled={todoList.entityStatus === 'loading'}\r\n                        onClick={onClickDeleteTodoList}>\r\n                        <Delete />\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm\r\n                    disabled={todoList.entityStatus === 'loading'}\r\n                    addItem={addTaskHandler}/>\r\n                <div style={{listStyle: 'none', paddingLeft: '0'}}>\r\n                    {tasksFor}\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={todoList.filter === 'all' ? 'contained' : 'outlined'}\r\n                        onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={todoList.filter === 'active' ? 'contained' : 'outlined'}\r\n                        onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={todoList.filter === 'completed' ? 'contained' : 'outlined'}\r\n                        onClick={onClickCompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    fetchTodolistsTC, addTodolistTC, removeTodolistTC,\r\n    changeTodoListFilterAC, changeTodoListTitleTC,\r\n    FilterValuesType, TodoListDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {TaskStatuses} from \"../../api/todoList-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype TodolistsListPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n    // BLL:\r\n    const todoLists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) return\r\n        dispatch(fetchTodolistsTC());\r\n    }, [dispatch, demo, isLoggedIn])\r\n\r\n    // TodoLists\r\n    const addTodoList = useCallback((title: string) => {\r\n        if (demo) return\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch, demo])\r\n\r\n    const deleteTodoList = useCallback((todoListID: string) => {\r\n        if (demo) return\r\n        dispatch(removeTodolistTC(todoListID));\r\n    }, [dispatch, demo])\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string, todoListID: string) => {\r\n        if (demo) return\r\n        dispatch(changeTodoListTitleTC(newTitle, todoListID));\r\n    }, [dispatch, demo])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        if (demo) return\r\n        dispatch(changeTodoListFilterAC(todoListID, value))\r\n    }, [dispatch, demo])\r\n\r\n    // Tasks\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        if (demo) return\r\n        dispatch(removeTaskTC(taskID, todoListID))\r\n    }, [dispatch, demo])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        if (demo) return\r\n        dispatch(addTaskTC(title, todoListID))\r\n    }, [dispatch, demo])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListID: string) => {\r\n        if (demo) return\r\n        dispatch(updateTaskTC(taskId, {status}, todoListID))\r\n    }, [dispatch, demo])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\r\n        if (demo) return\r\n        dispatch(updateTaskTC(taskId, {title: newTitle}, todoListID))\r\n    }, [dispatch, demo])\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={20} style={{padding: '15px'}}>\r\n                    <Todolist\r\n                        todoList={tl}\r\n                        deleteTodoList={deleteTodoList}\r\n                        tasks={tasks[tl.id]}\r\n                        addTask={addTask}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        demo={demo}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid\r\n            container spacing={3}\r\n            style={{justifyContent: 'space-evenly'}}>\r\n            {todoListsComponents}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppError} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<AppRootStateType, null | string>(state => state.app.error)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppError(null))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={!!error} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n};","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {logIn} from './auth-reducer';\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Email is required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Invalid password address';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(logIn(values));\r\n            formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a\r\n                                href={'https://social-network.samuraijs.com/'}\r\n                                rel=\"noreferrer\"\r\n                                target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email && formik.touched.email &&\r\n                        <div style={{color: 'red'}}>{formik.errors.email}</div>}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password && formik.touched.password &&\r\n                        <div style={{color: 'red'}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox/>}\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                            checked={formik.values.rememberMe}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from 'react';\r\nimport s from './Error404.module.css'\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <div className={s.error}>404</div>\r\n            <div className={s.errorText}>Not found!</div>\r\n            <div\r\n                className={s.errorText2}>\r\n                The resource requested could not be found on this server!\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404","import React, {useCallback, useEffect} from 'react';\r\nimport './App.css';\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\nimport LinearProgress from '@material-ui/core/LinearProgress/LinearProgress';\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport IconButton from '@material-ui/core/IconButton/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar/Toolbar';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport AppBar from '@material-ui/core/AppBar/AppBar';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport Error404 from \"../features/Error404/Error404\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress/CircularProgress';\r\nimport {logOut} from \"../features/Login/auth-reducer\";\r\n\r\ntype AppPropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nconst App: React.FC<AppPropsType> = ({demo = false}) => {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n    const logOutHandler = useCallback(() => {\r\n        dispatch(logOut())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{display: 'flex', justifyContent: 'center', height: \"100vh\", width: \"100vw\", alignItems: 'center'}}>\r\n            <CircularProgress disableShrink/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}\r\n                    style={{backgroundColor: \"#345379\"}}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    {isLoggedIn\r\n                        ? <Button\r\n                            onClick={logOutHandler}\r\n                            variant={'outlined'}\r\n                            color=\"inherit\">Log Out</Button>\r\n                        : <span>=)</span>\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <ErrorSnackbar/>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/404'} render={() => <Error404/>}/>\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App/>\r\n        </BrowserRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Error404_wrapper__21bPj\",\"error\":\"Error404_error__3vwBG\",\"errorText\":\"Error404_errorText__3Ncfk\",\"errorText2\":\"Error404_errorText2__3ezxk\"};"],"sourceRoot":""}