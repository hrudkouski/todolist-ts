{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","error","setError","title","setTitle","onClickAddItem","trimmedTitle","trim","addItem","errorMessage","className","value","onKeyPress","e","key","onChange","currentTarget","onClick","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","Todolist","filter","tasks","map","t","id","isDone","changeTaskStatus","checked","todoListID","type","changeTaskTitle","removeTask","changeTodolistTitle","deleteTodoList","addTask","changeFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","el","newTitle","tl","taskID","task","newTask","taskId","newIsDoneValue","getTaskForTodoList","todoList","todoListsComponents","newTodoListID","newTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.aae1dd08.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    };\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem();\r\n        }\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(false);\r\n    }\r\n\r\n    const errorMessage = error\r\n        ? <div className={'error-message'}>Title is required</div>\r\n        : null;\r\n\r\n    return (\r\n        <div>\r\n            <input\r\n                className={error ? 'error' : ''}\r\n                value={title}\r\n                onKeyPress={onKeyPressAddItem}\r\n                onChange={onChangeTitle}\r\n            />\r\n            <button onClick={onClickAddItem}>+</button>\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}","import React, {useState, ChangeEvent} from \"react\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title);\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <input\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TasksType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    todoListID: string\r\n    tasks: Array<TasksType>\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    deleteTodoList: (todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void;\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void;\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTodolistTitle: (newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const {filter} = props;\r\n\r\n    const onClickAllFilter = () => props.changeFilter('all', props.todoListID);\r\n    const onClickActiveFilter = () => props.changeFilter('active', props.todoListID);\r\n    const onClickCompletedFilter = () => props.changeFilter('completed', props.todoListID);\r\n\r\n    const onClickDeleteTodoList = () => props.deleteTodoList(props.todoListID);\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.todoListID)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID);\r\n    }\r\n\r\n    const tasks = props.tasks.map(t => {\r\n        const removeTaskHandler = () => props.removeTask(t.id, props.todoListID);\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID);\r\n\r\n        const changeTaskTitle = (title: string) => {\r\n            props.changeTaskTitle(t.id, title, props.todoListID);\r\n        }\r\n\r\n        return (\r\n            <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                <input\r\n                    onChange={onChangeHandler}\r\n                    type=\"checkbox\"\r\n                    checked={t.isDone}/>\r\n                <EditableSpan\r\n                    changeTitle={changeTaskTitle}\r\n                    title={t.title}/>\r\n                <button\r\n                    className='button-removed'\r\n                    onClick={removeTaskHandler}>x\r\n                </button>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan\r\n                        title={props.title}\r\n                        changeTitle={changeTodolistTitle}\r\n                    />\r\n                    <button onClick={onClickDeleteTodoList}>x</button>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n                <div>\r\n                    <button className={filter === 'all' ? 'active-filter' : ''} onClick={onClickAllFilter}>All\r\n                    </button>\r\n                    <button className={filter === 'active' ? 'active-filter' : ''}\r\n                            onClick={onClickActiveFilter}>Active\r\n                    </button>\r\n                    <button className={filter === 'completed' ? 'active-filter' : ''}\r\n                            onClick={onClickCompletedFilter}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nfunction App() {\r\n//BLL:\r\n    const todoListID_1 = v1();\r\n    const todoListID_2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to bye', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'React', isDone: false},\r\n            {id: v1(), title: 'JS', isDone: false},\r\n            {id: v1(), title: 'HTML', isDone: false},\r\n            {id: v1(), title: 'CSS', isDone: false},\r\n            {id: v1(), title: 'Code', isDone: false},\r\n            {id: v1(), title: 'Code.mu', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: false},\r\n            {id: v1(), title: 'Salt', isDone: false},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Butter', isDone: false},\r\n            {id: v1(), title: 'Water', isDone: false},\r\n            {id: v1(), title: 'Soda', isDone: false},\r\n        ]\r\n    })\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1();\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title,\r\n            filter: 'all',\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({\r\n            ...tasks, [newTodoListID]: []\r\n        })\r\n    }\r\n\r\n    function deleteTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(el => el.id !== todoListID))\r\n        delete tasks[todoListID];\r\n    }\r\n\r\n    function changeTodolistTitle(newTitle: string, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID\r\n            ? {...tl, title: newTitle}\r\n            : tl))\r\n    }\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter((task) => task.id !== taskID);\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TasksType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]});\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t =>\r\n            t.id === taskId\r\n                ? {...t, isDone: newIsDoneValue}\r\n                : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListID: string) {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t =>\r\n                t.id === taskId\r\n                    ? {...t, title: newTitle}\r\n                    : t)\r\n        })\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID\r\n            ? {...tl, filter: value}\r\n            : tl))\r\n    }\r\n\r\n    function getTaskForTodoList(todoList: TodoListType) {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => !t.isDone);\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone);\r\n            default:\r\n                return tasks[todoList.id];\r\n        }\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n        return (\r\n            <Todolist\r\n                key={tl.id}\r\n                todoListID={tl.id}\r\n                deleteTodoList={deleteTodoList}\r\n                tasks={getTaskForTodoList(tl)}\r\n                title={tl.title}\r\n                filter={tl.filter}\r\n                addTask={addTask}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTaskStatus={changeTaskStatus}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n            />\r\n        )\r\n    })\r\n\r\n//UI:\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm addItem={addTodoList}/>\r\n            {todoListsComponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}