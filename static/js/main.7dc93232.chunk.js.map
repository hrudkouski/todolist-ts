{"version":3,"sources":["serviceWorker.ts","store/todolists-reducer.ts","store/tasks-reducer.ts","store/store.ts","AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","todoListID_1","v1","todoListID_2","initialState","id","title","filter","isDone","rootReducer","combineReducers","tasks","state","action","type","todoListID","el","taskID","newTask","map","t","taskId","newIsDoneValue","newTitle","copyState","todoLists","newTodoListID","newTodoList","tl","store","createStore","AddItemForm","props","useState","error","setError","setTitle","onClickAddItem","trimmedTitle","trim","addItem","TextField","size","value","onKeyPress","e","key","onChange","currentTarget","label","variant","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","offEditMode","changeTitle","onBlur","autoFocus","onDoubleClick","Todolist","className","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Delete","changeTodolistTitle","deleteTodoList","addTask","style","listStyle","paddingLeft","Button","marginLeft","changeFilter","AppWithRedux","useSelector","dispatch","useDispatch","newTodoListTitle","changeTodoListTitleAC","newFilter","changeTodoListFilterAC","removeTasksAC","addTaskAC","changeTaskStatusAC","changeTitleStatusAC","getTaskForTodoList","todoList","todoListsComponents","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7dc93232.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FilterValuesType, TodoListType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST';\r\nconst ADD_TODOLIST = 'ADD_TODOLIST';\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE';\r\nconst CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER';\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: 'REMOVE_TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListAT = {\r\n    type: 'ADD_TODOLIST'\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTodoListTitleAT = {\r\n    type: 'CHANGE_TODOLIST_TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodoListFilterAT = {\r\n    type: 'CHANGE_TODOLIST_FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type ActionsType = RemoveTodoListAT\r\n    | AddTodoListAT\r\n    | ChangeTodoListTitleAT\r\n    | ChangeTodoListFilterAT;\r\n\r\nexport const todoListID_1 = v1();\r\nexport const todoListID_2 = v1();\r\n\r\nconst initialState: Array<TodoListType> = [\r\n    {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n    {id: todoListID_2, title: 'What to bye', filter: 'all'},\r\n]\r\n\r\nexport const todoListsReducer = (state = initialState, action: ActionsType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST:\r\n            return state.filter(el => el.id !== action.id)\r\n        case ADD_TODOLIST:\r\n            const newTodoListID = action.todoListID;\r\n            const newTodoList: TodoListType = {\r\n                id: newTodoListID,\r\n                title: action.title,\r\n                filter: 'all',\r\n            }\r\n            return [...state, newTodoList]\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(tl => tl.id === action.id\r\n                ? {...tl, title: action.title}\r\n                : tl);\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return state.map(tl => tl.id === action.id\r\n                ? {...tl, filter: action.filter}\r\n                : tl)\r\n        default:\r\n            // throw new Error('I don`t understand this action type')\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodoListAT => {\r\n    return {type: 'REMOVE_TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (newTodolistTitle: string): AddTodoListAT => {\r\n    return {type: 'ADD_TODOLIST', title: newTodolistTitle, todoListID: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (todoListID: string, newTodoListTitle: string): ChangeTodoListTitleAT => {\r\n    return {type: 'CHANGE_TODOLIST_TITLE', id: todoListID, title: newTodoListTitle}\r\n}\r\nexport const changeTodoListFilterAC = (todoListID: string, newFilter: FilterValuesType): ChangeTodoListFilterAT => {\r\n    return {type: 'CHANGE_TODOLIST_FILTER', id: todoListID, filter: newFilter}\r\n}\r\n","import {TaskStateType, TasksType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListAT, RemoveTodoListAT, todoListID_1, todoListID_2} from \"./todolists-reducer\";\r\n\r\nconst REMOVE_TASK = 'REMOVE_TASK';\r\nconst ADD_TASK = 'ADD_TASK';\r\nconst CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS';\r\nconst CHANGE_TITLE_STATUS = 'CHANGE_TITLE_STATUS';\r\nconst ADD_TODOLIST = 'ADD_TODOLIST';\r\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST';\r\n\r\nexport type AddTaskAT = {\r\n    type: 'ADD_TASK'\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type RemoveTaskAT = {\r\n    type: 'REMOVE_TASK'\r\n    taskID: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskStatusAT = {\r\n    type: 'CHANGE_TASK_STATUS'\r\n    taskId: string\r\n    newIsDoneValue: boolean\r\n    todoListID: string\r\n}\r\nexport type ChangeTitleStatusAT = {\r\n    type: 'CHANGE_TITLE_STATUS'\r\n    taskId: string\r\n    newTitle: string\r\n    todoListID: string\r\n}\r\n\r\nexport type ActionsType = AddTaskAT\r\n    | RemoveTodoListAT\r\n    | RemoveTaskAT\r\n    | ChangeTaskStatusAT\r\n    | ChangeTitleStatusAT\r\n    | AddTodoListAT;\r\n\r\nconst initialState: TaskStateType = {\r\n    [todoListID_1]: [\r\n        {id: v1(), title: 'React', isDone: false},\r\n        {id: v1(), title: 'JS', isDone: false},\r\n        {id: v1(), title: 'HTML', isDone: false},\r\n        {id: v1(), title: 'CSS', isDone: false},\r\n    ],\r\n    [todoListID_2]: [\r\n        {id: v1(), title: 'Milk', isDone: false},\r\n        {id: v1(), title: 'Salt', isDone: false},\r\n        {id: v1(), title: 'Bread', isDone: false},\r\n        {id: v1(), title: 'Butter', isDone: false},\r\n    ]\r\n};\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].filter((el) => el.id !== action.taskID),\r\n            };\r\n        case ADD_TASK:\r\n            const newTask: TasksType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false,\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: [newTask, ...state[action.todoListID]],\r\n            }\r\n        case CHANGE_TASK_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].map(t =>\r\n                    t.id === action.taskId\r\n                        ? {...t, isDone: action.newIsDoneValue}\r\n                        : t),\r\n            }\r\n        case CHANGE_TITLE_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].map(t =>\r\n                    t.id === action.taskId\r\n                        ? {...t, title: action.newTitle}\r\n                        : t),\r\n            };\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: [],\r\n            }\r\n        case REMOVE_TODOLIST:\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            // throw new Error('I don`t understand this action type')\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (title: string, todoListID: string): AddTaskAT => {\r\n    return {type: 'ADD_TASK', title, todoListID,}\r\n}\r\nexport const removeTasksAC = (taskID: string, todoListID: string): RemoveTaskAT => {\r\n    return {type: 'REMOVE_TASK', taskID: taskID, todoListID: todoListID,}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string,\r\n                                   newIsDoneValue: boolean,\r\n                                   todoListID: string): ChangeTaskStatusAT => {\r\n    return {type: 'CHANGE_TASK_STATUS', taskId, newIsDoneValue, todoListID,}\r\n}\r\nexport const changeTitleStatusAC = (taskId: string, newTitle: string, todoListID: string): ChangeTitleStatusAT => {\r\n    return {type: 'CHANGE_TITLE_STATUS', taskId, newTitle, todoListID,}\r\n}\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    };\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem();\r\n        }\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                value={title}\r\n                onKeyPress={onKeyPressAddItem}\r\n                onChange={onChangeTitle}\r\n                error={error}\r\n                label={'Title'}\r\n                variant={\"outlined\"}\r\n                helperText={error && 'Title is required'}\r\n            />\r\n            <IconButton\r\n                color={'primary'}\r\n                onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {useState, ChangeEvent, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title);\r\n    }\r\n\r\n    const onPressEnterOffEditMode = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onPressEnterOffEditMode}\r\n                autoFocus\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TasksType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    todoListID: string\r\n    tasks: Array<TasksType>\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    deleteTodoList: (todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void;\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void;\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTodolistTitle: (newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const {filter} = props;\r\n\r\n    const onClickAllFilter = () => props.changeFilter('all', props.todoListID);\r\n    const onClickActiveFilter = () => props.changeFilter('active', props.todoListID);\r\n    const onClickCompletedFilter = () => props.changeFilter('completed', props.todoListID);\r\n\r\n    const onClickDeleteTodoList = () => props.deleteTodoList(props.todoListID);\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.todoListID)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID);\r\n    }\r\n\r\n    const tasks = props.tasks.map(t => {\r\n        const removeTaskHandler = () => props.removeTask(t.id, props.todoListID);\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID);\r\n\r\n        const changeTaskTitle = (title: string) => {\r\n            props.changeTaskTitle(t.id, title, props.todoListID);\r\n        }\r\n\r\n        return (\r\n            <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                <Checkbox\r\n                    checked={t.isDone}\r\n                    onChange={onChangeHandler}\r\n                    color={'primary'}\r\n                />\r\n                <EditableSpan\r\n                    changeTitle={changeTaskTitle}\r\n                    title={t.title}/>\r\n                <IconButton onClick={removeTaskHandler}>\r\n                    <Delete color=\"secondary\"/>\r\n                </IconButton>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan\r\n                        title={props.title}\r\n                        changeTitle={changeTodolistTitle}\r\n                    />\r\n                    <IconButton onClick={onClickDeleteTodoList}>\r\n                        <Delete color=\"secondary\"/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n                    {tasks}\r\n                </ul>\r\n                <div>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                        onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                        onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                        onClick={onClickCompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodolistAC\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTitleStatusAC, removeTasksAC} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nfunction AppWithRedux() {\r\n    //BLL:\r\n    const todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    //TodoLists\r\n    function addTodoList(title: string) {\r\n        dispatch(addTodolistAC(title))\r\n    }\r\n\r\n    function deleteTodoList(todoListID: string) {\r\n        dispatch(removeTodolistAC(todoListID))\r\n    }\r\n\r\n    function changeTodolistTitle(newTitle: string, todoListID: string) {\r\n        dispatch(changeTodoListTitleAC(todoListID, newTitle))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        dispatch(changeTodoListFilterAC(todoListID, value))\r\n    }\r\n\r\n    //Tasks\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        dispatch(removeTasksAC(taskID, todoListID))\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, todoListID: string) {\r\n        dispatch(changeTaskStatusAC(taskId, newIsDoneValue, todoListID))\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListID: string) {\r\n        dispatch(changeTitleStatusAC(taskId, newTitle, todoListID))\r\n    }\r\n\r\n    function getTaskForTodoList(todoList: TodoListType) {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => !t.isDone);\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone);\r\n            default:\r\n                return tasks[todoList.id];\r\n        }\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={20} style={{padding: '15px'}}>\r\n                    <Todolist\r\n                        todoListID={tl.id}\r\n                        deleteTodoList={deleteTodoList}\r\n                        tasks={getTaskForTodoList(tl)}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    //UI:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={'outlined'}\r\n                        color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid\r\n                    container spacing={3}\r\n                    style={{justifyContent: 'space-evenly'}}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import AppWithReducers from \"./AppWithReducers\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}