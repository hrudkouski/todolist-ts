{"version":3,"sources":["serviceWorker.ts","store/tasks-reducer.ts","store/todolists-reducer.ts","store/store.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","tasks","state","action","type","todoListID","filter","el","id","taskID","newTask","v1","title","isDone","map","t","taskId","newIsDoneValue","newTitle","copyState","todoLists","newTodoListID","newTodoList","tl","store","createStore","AddItemForm","React","memo","props","addItem","useState","error","setError","setTitle","onClickAddItem","trimmedTitle","trim","TextField","size","value","onKeyPress","e","key","onChange","currentTarget","label","variant","helperText","IconButton","color","onClick","AddBox","EditableSpan","changeTitle","editMode","setEditMode","onEditMode","useCallback","offEditMode","onBlur","autoFocus","onDoubleClick","Task","task","removeTask","changeTaskStatus","changeTaskTitle","removeTaskHandler","onChangeHandler","checked","changeTaskTitleHandler","className","Checkbox","Delete","Todolist","deleteTodoList","changeFilter","addTask","changeTodolistTitle","onClickAllFilter","onClickActiveFilter","onClickCompletedFilter","onClickDeleteTodoList","changeTodolistTitleHandler","addTaskHandler","tasksForTodolist","tasksFor","style","listStyle","paddingLeft","Button","marginLeft","AppWithRedux","useSelector","dispatch","useDispatch","addTodoList","newTodoListTitle","changeTodoListTitleAC","newFilter","changeTodoListFilterAC","removeTasksAC","addTaskAC","changeTaskStatusAC","changeTitleStatusAC","todoListsComponents","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.b0727c68.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {TaskStateType, TasksType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\nimport {AddTodoListAT, RemoveTodoListAT} from \"./todolists-reducer\";\r\n\r\nconst REMOVE_TASK = 'REMOVE_TASK';\r\nconst ADD_TASK = 'ADD_TASK';\r\nconst CHANGE_TASK_STATUS = 'CHANGE_TASK_STATUS';\r\nconst CHANGE_TITLE_STATUS = 'CHANGE_TITLE_STATUS';\r\nconst ADD_TODOLIST = 'ADD_TODOLIST';\r\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST';\r\n\r\nexport type AddTaskAT = {\r\n    type: 'ADD_TASK'\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type RemoveTaskAT = {\r\n    type: 'REMOVE_TASK'\r\n    taskID: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTaskStatusAT = {\r\n    type: 'CHANGE_TASK_STATUS'\r\n    taskId: string\r\n    newIsDoneValue: boolean\r\n    todoListID: string\r\n}\r\nexport type ChangeTitleStatusAT = {\r\n    type: 'CHANGE_TITLE_STATUS'\r\n    taskId: string\r\n    newTitle: string\r\n    todoListID: string\r\n}\r\n\r\nexport type ActionsType = AddTaskAT\r\n    | RemoveTodoListAT\r\n    | RemoveTaskAT\r\n    | ChangeTaskStatusAT\r\n    | ChangeTitleStatusAT\r\n    | AddTodoListAT;\r\n\r\nconst initialState: TaskStateType = {\r\n    // [todoListID_1]: [\r\n    //     {id: v1(), title: 'React', isDone: false},\r\n    //     {id: v1(), title: 'JS', isDone: false},\r\n    //     {id: v1(), title: 'HTML', isDone: false},\r\n    //     {id: v1(), title: 'CSS', isDone: false},\r\n    // ],\r\n    // [todoListID_2]: [\r\n    //     {id: v1(), title: 'Milk', isDone: false},\r\n    //     {id: v1(), title: 'Salt', isDone: false},\r\n    //     {id: v1(), title: 'Bread', isDone: false},\r\n    //     {id: v1(), title: 'Butter', isDone: false},\r\n    // ]\r\n};\r\n\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].filter((el) => el.id !== action.taskID),\r\n            };\r\n        case ADD_TASK:\r\n            const newTask: TasksType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false,\r\n            }\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: [newTask, ...state[action.todoListID]],\r\n            }\r\n        case CHANGE_TASK_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].map(t =>\r\n                    t.id === action.taskId\r\n                        ? {...t, isDone: action.newIsDoneValue}\r\n                        : t),\r\n            }\r\n        case CHANGE_TITLE_STATUS:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].map(t =>\r\n                    t.id === action.taskId\r\n                        ? {...t, title: action.newTitle}\r\n                        : t),\r\n            };\r\n        case ADD_TODOLIST:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: [],\r\n            }\r\n        case REMOVE_TODOLIST:\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            // throw new Error('I don`t understand this action type')\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addTaskAC = (title: string, todoListID: string): AddTaskAT => {\r\n    return {type: 'ADD_TASK', title, todoListID,}\r\n}\r\nexport const removeTasksAC = (taskID: string, todoListID: string): RemoveTaskAT => {\r\n    return {type: 'REMOVE_TASK', taskID: taskID, todoListID: todoListID,}\r\n}\r\nexport const changeTaskStatusAC = (taskId: string,\r\n                                   newIsDoneValue: boolean,\r\n                                   todoListID: string): ChangeTaskStatusAT => {\r\n    return {type: 'CHANGE_TASK_STATUS', taskId, newIsDoneValue, todoListID,}\r\n}\r\nexport const changeTitleStatusAC = (taskId: string, newTitle: string, todoListID: string): ChangeTitleStatusAT => {\r\n    return {type: 'CHANGE_TITLE_STATUS', taskId, newTitle, todoListID,}\r\n}\r\n","import {FilterValuesType, TodoListType} from \"../AppWithRedux\";\r\nimport {v1} from \"uuid\";\r\n\r\nconst REMOVE_TODOLIST = 'REMOVE_TODOLIST';\r\nconst ADD_TODOLIST = 'ADD_TODOLIST';\r\nconst CHANGE_TODOLIST_TITLE = 'CHANGE_TODOLIST_TITLE';\r\nconst CHANGE_TODOLIST_FILTER = 'CHANGE_TODOLIST_FILTER';\r\n\r\nexport type RemoveTodoListAT = {\r\n    type: 'REMOVE_TODOLIST'\r\n    id: string\r\n}\r\nexport type AddTodoListAT = {\r\n    type: 'ADD_TODOLIST'\r\n    title: string\r\n    todoListID: string\r\n}\r\nexport type ChangeTodoListTitleAT = {\r\n    type: 'CHANGE_TODOLIST_TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type ChangeTodoListFilterAT = {\r\n    type: 'CHANGE_TODOLIST_FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type ActionsType = RemoveTodoListAT\r\n    | AddTodoListAT\r\n    | ChangeTodoListTitleAT\r\n    | ChangeTodoListFilterAT;\r\n\r\n// export const todoListID_1 = v1();\r\n// export const todoListID_2 = v1();\r\n\r\nconst initialState: Array<TodoListType> = [\r\n    // {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n    // {id: todoListID_2, title: 'What to bye', filter: 'all'},\r\n]\r\n\r\nexport const todoListsReducer = (state = initialState, action: ActionsType): Array<TodoListType> => {\r\n    switch (action.type) {\r\n        case REMOVE_TODOLIST:\r\n            return state.filter(el => el.id !== action.id)\r\n        case ADD_TODOLIST:\r\n            const newTodoListID = action.todoListID;\r\n            const newTodoList: TodoListType = {\r\n                id: newTodoListID,\r\n                title: action.title,\r\n                filter: 'all',\r\n            }\r\n            return [...state, newTodoList]\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(tl => tl.id === action.id\r\n                ? {...tl, title: action.title}\r\n                : tl);\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return state.map(tl => tl.id === action.id\r\n                ? {...tl, filter: action.filter}\r\n                : tl)\r\n        default:\r\n            // throw new Error('I don`t understand this action type')\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string): RemoveTodoListAT => {\r\n    return {type: 'REMOVE_TODOLIST', id: todolistId}\r\n}\r\nexport const addTodolistAC = (newTodolistTitle: string): AddTodoListAT => {\r\n    return {type: 'ADD_TODOLIST', title: newTodolistTitle, todoListID: v1()}\r\n}\r\nexport const changeTodoListTitleAC = (todoListID: string, newTodoListTitle: string): ChangeTodoListTitleAT => {\r\n    return {type: 'CHANGE_TODOLIST_TITLE', id: todoListID, title: newTodoListTitle}\r\n}\r\nexport const changeTodoListFilterAC = (todoListID: string, newFilter: FilterValuesType): ChangeTodoListFilterAT => {\r\n    return {type: 'CHANGE_TODOLIST_FILTER', id: todoListID, filter: newFilter}\r\n}\r\n","import {tasksReducer} from './tasks-reducer';\r\nimport {todoListsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n    const {addItem} = props;\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle)\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    };\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem();\r\n        }\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                value={title}\r\n                onKeyPress={onKeyPressAddItem}\r\n                onChange={onChangeTitle}\r\n                error={!!error}\r\n                label={'Title'}\r\n                variant={\"outlined\"}\r\n                helperText={error && 'Title is required'}\r\n            />\r\n            <IconButton\r\n                color={'primary'}\r\n                onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useState, ChangeEvent, KeyboardEvent, useCallback} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanType = {\r\n    value: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n\r\n    const {\r\n        value,\r\n        changeTitle\r\n    } = props;\r\n\r\n    const [title, setTitle] = useState<string>(value)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const onEditMode = useCallback(() => {\r\n        setEditMode(true)\r\n        changeTitle(value)\r\n    }, [changeTitle, value])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        changeTitle(title);\r\n    }, [changeTitle, title])\r\n\r\n    const onPressEnterOffEditMode = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onPressEnterOffEditMode}\r\n                autoFocus\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{value}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TasksType} from \"./AppWithRedux\";\r\n\r\nexport type TasksPropsType = {\r\n    task: TasksType\r\n    removeTask: (taskID: string, todoListID: string) => void;\r\n    todoListID: string\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TasksPropsType) => {\r\n\r\n    const {\r\n        task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle,\r\n        todoListID,\r\n    } = props;\r\n\r\n    const removeTaskHandler = useCallback(() => removeTask(task.id, todoListID), [task.id, todoListID, removeTask])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => changeTaskStatus(task.id, e.currentTarget.checked, todoListID), [task.id, todoListID, changeTaskStatus])\r\n\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title, todoListID)\r\n    }, [task.id, todoListID, changeTaskTitle])\r\n\r\n    return (\r\n        <div className={task.isDone ? 'is-done' : ''}>\r\n            <Checkbox\r\n                checked={task.isDone}\r\n                onChange={onChangeHandler}\r\n                color={'primary'}\r\n            />\r\n            <EditableSpan\r\n                changeTitle={changeTaskTitleHandler}\r\n                value={task.title}/>\r\n            <IconButton onClick={removeTaskHandler}>\r\n                <Delete color=\"secondary\"/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from \"react\";\r\nimport {FilterValuesType, TasksType} from \"./AppWithRedux\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task\";\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    todoListID: string\r\n    tasks: Array<TasksType>\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    deleteTodoList: (todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void;\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void;\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTodolistTitle: (newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n\r\n    const {\r\n        title,\r\n        todoListID,\r\n        tasks,\r\n        changeTaskTitle,\r\n        deleteTodoList,\r\n        filter,\r\n        removeTask,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        changeTodolistTitle,\r\n    } = props;\r\n\r\n    const onClickAllFilter = useCallback(() => changeFilter('all', todoListID), [changeFilter, todoListID])\r\n\r\n    const onClickActiveFilter = useCallback(() => changeFilter('active', todoListID), [changeFilter, todoListID])\r\n\r\n    const onClickCompletedFilter = useCallback(() => changeFilter('completed', todoListID), [changeFilter, todoListID])\r\n\r\n    const onClickDeleteTodoList = useCallback(() => deleteTodoList(todoListID), [deleteTodoList, todoListID])\r\n\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(title, todoListID)\r\n    }, [changeTodolistTitle, todoListID])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todoListID)\r\n    }, [addTask, todoListID])\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.isDone)\r\n    }\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => !t.isDone)\r\n    }\r\n\r\n    const tasksFor = tasksForTodolist.map(t => {\r\n        return <Task\r\n            task={t}\r\n            key={t.id}\r\n            removeTask={removeTask}\r\n            todoListID={todoListID}\r\n            changeTaskStatus={changeTaskStatus}\r\n            changeTaskTitle={changeTaskTitle}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan\r\n                        value={title}\r\n                        changeTitle={changeTodolistTitleHandler}\r\n                    />\r\n                    <IconButton onClick={onClickDeleteTodoList}>\r\n                        <Delete color=\"secondary\"/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTaskHandler}/>\r\n                <div style={{listStyle: 'none', paddingLeft: '0'}}>\r\n                    {\r\n                        tasksFor\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                        onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                        onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                        onClick={onClickCompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import React, {useCallback} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeTodoListFilterAC,\r\n    changeTodoListTitleAC,\r\n    removeTodolistAC\r\n} from \"./store/todolists-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTitleStatusAC, removeTasksAC} from \"./store/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store/store\";\r\n\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nconst AppWithRedux = () => {\r\n    //BLL:\r\n    const todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    //TodoLists\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistAC(title))\r\n    }, [dispatch])\r\n    const deleteTodoList = useCallback((todoListID: string) => {\r\n        dispatch(removeTodolistAC(todoListID))\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback((newTitle: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleAC(todoListID, newTitle))\r\n    }, [dispatch])\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodoListFilterAC(todoListID, value))\r\n    }, [dispatch])\r\n\r\n    //Tasks\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTasksAC(taskID, todoListID))\r\n    }, [dispatch])\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }, [dispatch])\r\n    const changeTaskStatus = useCallback((taskId: string, newIsDoneValue: boolean, todoListID: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, newIsDoneValue, todoListID))\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\r\n        dispatch(changeTitleStatusAC(taskId, newTitle, todoListID))\r\n    }, [dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={20} style={{padding: '15px'}}>\r\n                    <Todolist\r\n                        todoListID={tl.id}\r\n                        deleteTodoList={deleteTodoList}\r\n                        tasks={tasks[tl.id]}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    //UI:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={'outlined'}\r\n                        color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid\r\n                    container spacing={3}\r\n                    style={{justifyContent: 'space-evenly'}}>\r\n                    {\r\n                        todoListsComponents\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store/store\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}