{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","error","setError","title","setTitle","onClickAddTask","trimmedTitle","trim","addTask","todoListID","filter","errorMessage","className","tasks","map","t","key","id","isDone","onChange","e","changeTaskStatus","currentTarget","checked","type","onClick","removeTask","deleteTodoList","value","onKeyPress","changeFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","el","taskID","task","newTask","taskId","newIsDoneValue","tl","getTaskForTodoList","todoList","todoListsComponents","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3069d021.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TasksType} from \"./App\";\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    todoListID: string\r\n    tasks: Array<TasksType>\r\n    deleteTodoList: (todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void;\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void;\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onClickAddTask = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.addTask(trimmedTitle, props.todoListID)\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    };\r\n\r\n    const onKeyPressAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddTask();\r\n        }\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(false);\r\n    }\r\n\r\n    const onClickAllFilter = () => props.changeFilter('all', props.todoListID);\r\n    const onClickActiveFilter = () => props.changeFilter('active', props.todoListID);\r\n    const onClickCompletedFilter = () => props.changeFilter('completed', props.todoListID);\r\n\r\n    const onClickDeleteTodoList = () => props.deleteTodoList(props.todoListID);\r\n\r\n    const {filter} = props;\r\n\r\n    const errorMessage = error\r\n        ? <div className={'error-message'}>Title is required</div>\r\n        : null;\r\n\r\n    const tasks = props.tasks.map(t => {\r\n        const removeTaskHandler = () => props.removeTask(t.id, props.todoListID);\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID);\r\n        return (\r\n            <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                <input\r\n                    onChange={onChangeHandler}\r\n                    type=\"checkbox\"\r\n                    checked={t.isDone}/>\r\n                <span>{t.title}</span>\r\n                <button\r\n                    className='button-removed'\r\n                    onClick={removeTaskHandler}>x\r\n                </button>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>{props.title}\r\n                    <button onClick={onClickDeleteTodoList}>x</button>\r\n                </h3>\r\n                <div>\r\n                    <input\r\n                        className={error ? 'error' : ''}\r\n                        value={title}\r\n                        onKeyPress={onKeyPressAddTask}\r\n                        onChange={onChangeTitle}\r\n                    />\r\n                    <button onClick={onClickAddTask}>+</button>\r\n                    {errorMessage}\r\n                </div>\r\n                <ul>\r\n                    {tasks}\r\n                </ul>\r\n                <div>\r\n                    <button className={filter === 'all' ? 'active-filter' : ''} onClick={onClickAllFilter}>All\r\n                    </button>\r\n                    <button className={filter === 'active' ? 'active-filter' : ''}\r\n                            onClick={onClickActiveFilter}>Active\r\n                    </button>\r\n                    <button className={filter === 'completed' ? 'active-filter' : ''}\r\n                            onClick={onClickCompletedFilter}>Completed\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {v1} from 'uuid';\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nfunction App() {\r\n//BLL:\r\n    const todoListID_1 = v1();\r\n    const todoListID_2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to bye', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'React', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: false},\r\n            {id: v1(), title: 'HTML', isDone: false},\r\n            {id: v1(), title: 'CSS', isDone: false},\r\n            {id: v1(), title: 'Code', isDone: false},\r\n            {id: v1(), title: 'Code.mu', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: false},\r\n            {id: v1(), title: 'Salt', isDone: false},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Butter', isDone: false},\r\n            {id: v1(), title: 'Water', isDone: false},\r\n            {id: v1(), title: 'Soda', isDone: false},\r\n        ]\r\n    })\r\n\r\n    function deleteTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(el => el.id !== todoListID))\r\n        delete tasks[todoListID];\r\n    }\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter((task) => task.id !== taskID);\r\n        setTasks({...tasks})\r\n        // setTasks({...tasks, [todoListID]: tasks[todoListID].filter((task) => task.id !== taskID)})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TasksType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]});\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, todoListID: string) {\r\n        // tasks[todoListID] = tasks[todoListID].map(t =>\r\n        //     t.id === taskId\r\n        //         ? {...t, isDone: newIsDoneValue}\r\n        //         : t)\r\n        // setTasks({...tasks})\r\n\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t =>\r\n                t.id === taskId\r\n                    ? {...t, isDone: newIsDoneValue}\r\n                    : t)\r\n        })\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID\r\n            ? {...tl, filter: value}\r\n            : tl))\r\n    }\r\n\r\n    function getTaskForTodoList(todoList: TodoListType) {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => !t.isDone);\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone);\r\n            default:\r\n                return tasks[todoList.id];\r\n        }\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n        return (\r\n            <Todolist\r\n                key={tl.id}\r\n                todoListID={tl.id}\r\n                deleteTodoList={deleteTodoList}\r\n                tasks={getTaskForTodoList(tl)}\r\n                title={tl.title}\r\n                filter={tl.filter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeTaskStatus}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n            />\r\n        )\r\n    })\r\n\r\n//UI:\r\n    return (\r\n        <div className=\"App\">\r\n            {todoListsComponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}