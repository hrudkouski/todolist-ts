{"version":3,"sources":["serviceWorker.ts","api/todoList-api.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todoListApi","get","title","post","todolistId","delete","put","taskId","model","SET_TODOLISTS","ADD_TODOLIST","REMOVE_TODOLIST","CHANGE_TODOLIST_TITLE","CHANGE_TODOLIST_FILTER","initialState","fetchTodolistsTC","dispatch","then","res","todolists","data","type","addTodolistTC","todolist","resultCode","item","removeTodolistTC","todoListID","id","changeTodoListTitleTC","newTitle","newTodoListTitle","changeTodoListTitleAC","SET_TASKS","ADD_TASK","REMOVE_TASK","UPDATE_TASK","fetchTasksTC","tasks","setTasksAC","items","addTaskTC","task","removeTaskTC","taskID","removeTasksAC","updateTaskTC","domainModel","getState","find","el","apiModel","description","status","priority","startDate","deadline","updateTaskAC","rootReducer","combineReducers","state","action","todoListId","filter","map","t","copyState","forEach","todoLists","tl","store","createStore","applyMiddleware","thunkMiddleWare","AddItemForm","React","memo","props","addItem","useState","error","setError","setTitle","onClickAddItem","trimmedTitle","trim","TextField","size","value","onKeyPress","e","key","onChange","currentTarget","label","variant","helperText","IconButton","color","onClick","AddBox","EditableSpan","changeTitle","editMode","setEditMode","onEditMode","useCallback","offEditMode","onBlur","autoFocus","onDoubleClick","Task","removeTask","changeTaskStatus","changeTaskTitle","removeTaskHandler","onChangeHandler","newIsDoneValue","checked","Completed","New","changeTaskTitleHandler","className","Checkbox","Delete","Todolist","deleteTodoList","changeFilter","addTask","changeTodolistTitle","useDispatch","useEffect","onClickAllFilter","onClickActiveFilter","onClickCompletedFilter","onClickDeleteTodoList","changeTodolistTitleHandler","addTaskHandler","tasksForTodolist","tasksFor","style","listStyle","paddingLeft","Button","marginLeft","TodolistsList","useSelector","addTodoList","newFilter","changeTodoListFilterAC","todoListsComponents","Grid","Paper","elevation","padding","container","spacing","justifyContent","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.07cb1f9e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '3af7a44d-0a6b-4bf7-b34b-b5730fa5756f'\r\n    }\r\n})\r\n\r\n// Types\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TasksType = {\r\n    description: string | null\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string | null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    description: string | null\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string | null\r\n    deadline: string | null\r\n}\r\ntype CommonResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsError: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\ntype TasksResponseType = {\r\n    error: null | string\r\n    items: TasksType[]\r\n    totalCount: number\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\n// Api\r\nexport const todoListApi = {\r\n    getToDoList() {\r\n        return instance.get<TodoListType[]>('todo-lists');\r\n    },\r\n\r\n    createTodolist(title: string) {\r\n        return instance.post<CommonResponseType<{ item: TodoListType }>>('todo-lists', {title})\r\n    },\r\n\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}`)\r\n    },\r\n\r\n    updateTodolistTitle(title: string, todolistId: string) {\r\n        return instance.put<CommonResponseType>(`todo-lists/${todolistId}`, {title})\r\n    },\r\n\r\n    getTasksForTodolist(todolistId: string) {\r\n        return instance.get<TasksResponseType>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n\r\n    createTaskForTodolist(title: string, todolistId: string) {\r\n        return instance.post<CommonResponseType<{ item: TasksType }>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n\r\n    deleteTaskFromTodolist(taskId: string, todolistId: string,) {\r\n        return instance.delete<CommonResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n\r\n    updateTaskForTodolist(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<CommonResponseType<TasksType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n}\r\n\r\n","import {todoListApi, TodoListType} from \"../../api/todoList-api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// Actions\r\nexport const SET_TODOLISTS = 'todolist-ts/todolists-reducer/SET_TODOLISTS';\r\nexport const ADD_TODOLIST = 'todolist-ts/todolists-reducer/ADD_TODOLIST';\r\nexport const REMOVE_TODOLIST = 'todolist-ts/todolists-reducer/REMOVE_TODOLIST';\r\nconst CHANGE_TODOLIST_TITLE = 'todolist-ts/todolists-reducer/CHANGE_TODOLIST_TITLE';\r\nconst CHANGE_TODOLIST_FILTER = 'todolist-ts/todolists-reducer/CHANGE_TODOLIST_FILTER';\r\n\r\n// Types\r\nexport type SetTodolistsAT = ReturnType<typeof setTodolistsAC>\r\nexport type AddTodoListAT = ReturnType<typeof addTodolistAC>\r\nexport type RemoveTodoListAT = ReturnType<typeof removeTodolistAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListDomainType = TodoListType & {\r\n    filter: FilterValuesType\r\n}\r\nexport type ActionsType =\r\n    | SetTodolistsAT\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT\r\n    | ReturnType<typeof changeTodoListTitleAC>\r\n    | ReturnType<typeof changeTodoListFilterAC>\r\n\r\n// Initial State\r\nconst initialState: TodoListDomainType[] = [];\r\n\r\n// Reducer\r\nexport const todoListsReducer = (state: TodoListDomainType[] = initialState, action: ActionsType): TodoListDomainType[] => {\r\n    switch (action.type) {\r\n        case SET_TODOLISTS: {\r\n            return action.todolists.map(el => ({...el, filter: \"all\"}));\r\n        }\r\n        case ADD_TODOLIST:\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case REMOVE_TODOLIST:\r\n            return state.filter(el => el.id !== action.id)\r\n        case CHANGE_TODOLIST_TITLE:\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl);\r\n        case CHANGE_TODOLIST_FILTER:\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setTodolistsAC = (todolists: TodoListType[],) => {\r\n    return {type: SET_TODOLISTS, todolists} as const\r\n}\r\n\r\nexport const addTodolistAC = (todolist: TodoListType) => {\r\n    return {type: ADD_TODOLIST, todolist} as const\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n    return {type: REMOVE_TODOLIST, id: todolistId} as const\r\n}\r\n\r\nexport const changeTodoListTitleAC = (todoListID: string, newTodoListTitle: string) => {\r\n    return {type: CHANGE_TODOLIST_TITLE, id: todoListID, title: newTodoListTitle} as const\r\n}\r\n\r\nexport const changeTodoListFilterAC = (todoListID: string, newFilter: FilterValuesType) => {\r\n    return {type: CHANGE_TODOLIST_FILTER, id: todoListID, filter: newFilter} as const\r\n}\r\n\r\n\r\n// Thunk Creators\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todoListApi.getToDoList()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todoListApi.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todoListID: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todoListApi.deleteTodolist(todoListID)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTodolistAC(todoListID))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeTodoListTitleTC = (newTitle: string, todoListID: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todoListApi.updateTodolistTitle(newTitle, todoListID)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodoListTitleAC(todoListID, newTitle))\r\n                }\r\n            })\r\n    }\r\n}\r\n","import {\r\n    SetTodolistsAT, AddTodoListAT, RemoveTodoListAT,\r\n    SET_TODOLISTS, ADD_TODOLIST, REMOVE_TODOLIST,\r\n} from \"./todolists-reducer\";\r\nimport {TaskPriorities, TaskStatuses, TasksType, todoListApi, UpdateTaskModelType} from \"../../api/todoList-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\n\r\n// Actions\r\nconst SET_TASKS = 'todolist-ts/tasks-reducer/SET_TASKS';\r\nconst ADD_TASK = 'todolist-ts/tasks-reducer/ADD_TASK';\r\nconst REMOVE_TASK = 'todolist-ts/tasks-reducer/REMOVE_TASK';\r\nconst UPDATE_TASK = 'todolist-ts/tasks-reducer/UPDATE_TASK';\r\n\r\n// Types\r\nexport type UpdateDomainTaskModelType = {\r\n    description?: string | null\r\n    title?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string | null\r\n    deadline?: string | null\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\nexport type ActionsType =\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | SetTodolistsAT\r\n    | AddTodoListAT\r\n    | RemoveTodoListAT;\r\n\r\n//Initial State\r\nconst initialState: TaskStateType = {};\r\n\r\n// Reducer\r\nexport const tasksReducer = (state = initialState, action: ActionsType): TaskStateType => {\r\n    switch (action.type) {\r\n        case SET_TASKS:\r\n            return {...state, [action.todoListID]: action.tasks}\r\n        case ADD_TASK:\r\n            return {\r\n                ...state,\r\n                [action.task.todoListId]: [action.task, ...state[action.task.todoListId]],\r\n            }\r\n        case REMOVE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].filter((el) => el.id !== action.taskID)\r\n            };\r\n        case UPDATE_TASK:\r\n            return {\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case SET_TODOLISTS: {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(el => {\r\n                copyState[el.id] = [];\r\n            })\r\n            return copyState\r\n        }\r\n        case ADD_TODOLIST:\r\n            return {...state, [action.todolist.id]: []}\r\n        case REMOVE_TODOLIST:\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Action Creators\r\nexport const setTasksAC = (tasks: TasksType[], todoListID: string) => {\r\n    return {type: SET_TASKS, tasks, todoListID,} as const\r\n}\r\n\r\nexport const addTaskAC = (task: TasksType) => {\r\n    return {type: ADD_TASK, task,} as const\r\n}\r\n\r\nexport const removeTasksAC = (taskID: string, todoListID: string) => {\r\n    return {type: REMOVE_TASK, taskID: taskID, todoListID: todoListID,} as const\r\n}\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todoListID: string) => {\r\n    return {type: UPDATE_TASK, taskId, model, todoListID,} as const\r\n}\r\n\r\n// Thunk Creators\r\nexport const fetchTasksTC = (todoListID: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todoListApi.getTasksForTodolist(todoListID)\r\n            .then((res) => {\r\n                dispatch(setTasksAC(res.data.items, todoListID))\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTaskTC = (title: string, todoListID: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todoListApi.createTaskForTodolist(title, todoListID)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC(res.data.data.item))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const removeTaskTC = (taskID: string, todoListID: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todoListApi.deleteTaskFromTodolist(taskID, todoListID)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(removeTasksAC(taskID, todoListID))\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType,\r\n                             todoListID: string) => {\r\n    return (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n\r\n        const allTasksFromState = getState().tasks;\r\n        const task = allTasksFromState[todoListID].find(el => el.id === taskId);\r\n\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                description: task.description,\r\n                title: task.title,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...domainModel\r\n            };\r\n\r\n            todoListApi.updateTaskForTodolist(todoListID, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todoListID))\r\n                    }\r\n                })\r\n        }\r\n    }\r\n}\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todoListsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunkMiddleWare from \"redux-thunk\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todoLists: todoListsReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleWare));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormType) => {\r\n\r\n    const {addItem} = props;\r\n\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            addItem(trimmedTitle)\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    };\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem();\r\n        }\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                value={title}\r\n                onKeyPress={onKeyPressAddItem}\r\n                onChange={onChangeTitle}\r\n                error={!!error}\r\n                label={'Title'}\r\n                variant={\"outlined\"}\r\n                helperText={error && 'Title is required'}\r\n            />\r\n            <IconButton\r\n                color={'primary'}\r\n                onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useState, ChangeEvent, KeyboardEvent, useCallback} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanType = {\r\n    value: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanType) => {\r\n\r\n    const {\r\n        value,\r\n        changeTitle\r\n    } = props;\r\n\r\n    const [title, setTitle] = useState<string>(value)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const onEditMode = useCallback(() => {\r\n        setEditMode(true)\r\n        changeTitle(value)\r\n    }, [changeTitle, value])\r\n\r\n    const offEditMode = useCallback(() => {\r\n        setEditMode(false)\r\n        changeTitle(title);\r\n    }, [changeTitle, title])\r\n\r\n    const onPressEnterOffEditMode = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === 'Enter') {\r\n            offEditMode()\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                onKeyPress={onPressEnterOffEditMode}\r\n                autoFocus\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{value}</span>\r\n    )\r\n})","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TaskStatuses, TasksType} from \"../../../../api/todoList-api\";\r\n\r\nexport type TasksPropsType = {\r\n    task: TasksType\r\n    removeTask: (taskID: string, todoListID: string) => void;\r\n    todoListID: string\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TasksPropsType) => {\r\n\r\n    const {\r\n        task,\r\n        removeTask,\r\n        changeTaskStatus,\r\n        changeTaskTitle,\r\n        todoListID,\r\n    } = props;\r\n\r\n    const removeTaskHandler = useCallback(() => removeTask(task.id, todoListID), [task.id, todoListID, removeTask])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n            const newIsDoneValue = e.currentTarget.checked;\r\n            changeTaskStatus(task.id,\r\n                newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n                todoListID)\r\n        }, [task.id, todoListID, changeTaskStatus]\r\n    )\r\n\r\n    const changeTaskTitleHandler = useCallback((title: string) => {\r\n        changeTaskTitle(task.id, title, todoListID)\r\n    }, [task.id, todoListID, changeTaskTitle])\r\n\r\n    return (\r\n        // <div className={task.status ? 'is-done' : ''}>\r\n            <div className={task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n            <Checkbox\r\n                // checked={!!task.status}\r\n                checked={task.status === TaskStatuses.Completed}\r\n                onChange={onChangeHandler}\r\n                color={'primary'}\r\n            />\r\n            <EditableSpan\r\n                changeTitle={changeTaskTitleHandler}\r\n                value={task.title}/>\r\n            <IconButton onClick={removeTaskHandler}>\r\n                <Delete color=\"secondary\"/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n})","import React, {useCallback, useEffect} from \"react\";\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskStatuses, TasksType} from \"../../../api/todoList-api\";\r\nimport {FilterValuesType} from \"../todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTasksTC} from \"../tasks-reducer\";\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    todoListID: string\r\n    tasks: Array<TasksType>\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    deleteTodoList: (todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void;\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void;\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, status: TaskStatuses, todoListID: string) => void\r\n    changeTodolistTitle: (newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n\r\n    const {\r\n        title,\r\n        todoListID,\r\n        tasks,\r\n        changeTaskTitle,\r\n        deleteTodoList,\r\n        filter,\r\n        removeTask,\r\n        changeFilter,\r\n        addTask,\r\n        changeTaskStatus,\r\n        changeTodolistTitle,\r\n    } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect( () => {\r\n        dispatch(fetchTasksTC(todoListID));\r\n    }, [todoListID, dispatch])\r\n\r\n    const onClickAllFilter = useCallback(() => changeFilter('all', todoListID), [changeFilter, todoListID])\r\n\r\n    const onClickActiveFilter = useCallback(() => changeFilter('active', todoListID), [changeFilter, todoListID])\r\n\r\n    const onClickCompletedFilter = useCallback(() => changeFilter('completed', todoListID), [changeFilter, todoListID])\r\n\r\n    const onClickDeleteTodoList = useCallback(() => deleteTodoList(todoListID), [deleteTodoList, todoListID])\r\n\r\n    const changeTodolistTitleHandler = useCallback((title: string) => {\r\n        changeTodolistTitle(title, todoListID)\r\n    }, [changeTodolistTitle, todoListID])\r\n\r\n    const addTaskHandler = useCallback((title: string) => {\r\n        addTask(title, todoListID)\r\n    }, [addTask, todoListID])\r\n\r\n    let tasksForTodolist = tasks;\r\n    if (filter === 'completed') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    if (filter === 'active') {\r\n        tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n\r\n    const tasksFor = tasksForTodolist.map(t => {\r\n        return <Task\r\n            task={t}\r\n            key={t.id}\r\n            removeTask={removeTask}\r\n            todoListID={todoListID}\r\n            changeTaskStatus={changeTaskStatus}\r\n            changeTaskTitle={changeTaskTitle}\r\n        />\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan\r\n                        value={title}\r\n                        changeTitle={changeTodolistTitleHandler}\r\n                    />\r\n                    <IconButton onClick={onClickDeleteTodoList}>\r\n                        <Delete color=\"secondary\"/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTaskHandler}/>\r\n                <div style={{listStyle: 'none', paddingLeft: '0'}}>\r\n                    {\r\n                        tasksFor\r\n                    }\r\n                </div>\r\n                <div>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                        onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                        onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                        onClick={onClickCompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {\r\n    fetchTodolistsTC, addTodolistTC, removeTodolistTC,\r\n    changeTodoListFilterAC, changeTodoListTitleTC,\r\n    FilterValuesType, TodoListDomainType\r\n} from \"./todolists-reducer\";\r\nimport {addTaskTC, removeTaskTC, TaskStateType, updateTaskTC} from \"./tasks-reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {TaskStatuses} from \"../../api/todoList-api\";\r\nimport {Grid, Paper} from \"@material-ui/core\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\n\r\nexport const TodolistsList = () => {\r\n\r\n    // BLL:\r\n    const todoLists = useSelector<AppRootStateType, TodoListDomainType[]>(state => state.todoLists);\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC());\r\n    }, [dispatch])\r\n\r\n    // TodoLists\r\n    const addTodoList = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    const deleteTodoList = useCallback((todoListID: string) => {\r\n        dispatch(removeTodolistTC(todoListID));\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback((newTitle: string, todoListID: string) => {\r\n        dispatch(changeTodoListTitleTC(newTitle, todoListID));\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((value: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeTodoListFilterAC(todoListID, value))\r\n    }, [dispatch])\r\n\r\n    // Tasks\r\n    const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n        dispatch(removeTaskTC(taskID, todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskTC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskStatus = useCallback((taskId: string, status: TaskStatuses, todoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, {status}, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((taskId: string, newTitle: string, todoListID: string) => {\r\n        dispatch(updateTaskTC(taskId, {title: newTitle}, todoListID))\r\n    }, [dispatch])\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={20} style={{padding: '15px'}}>\r\n                    <Todolist\r\n                        todoListID={tl.id}\r\n                        deleteTodoList={deleteTodoList}\r\n                        tasks={tasks[tl.id]}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px 0'}}>\r\n            <AddItemForm addItem={addTodoList}/>\r\n        </Grid>\r\n        <Grid\r\n            container spacing={3}\r\n            style={{justifyContent: 'space-evenly'}}>\r\n            {todoListsComponents}\r\n        </Grid>\r\n    </>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={'outlined'}\r\n                        color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/store\";\r\nimport App from \"./app/App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}