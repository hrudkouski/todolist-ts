{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","error","setError","title","setTitle","onClickAddItem","trimmedTitle","trim","addItem","TextField","size","value","onKeyPress","e","key","onChange","currentTarget","label","variant","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeTitle","autoFocus","onDoubleClick","Todolist","filter","tasks","map","t","id","className","isDone","Checkbox","checked","changeTaskStatus","todoListID","changeTaskTitle","removeTask","Delete","changeTodolistTitle","deleteTodoList","addTask","style","listStyle","paddingLeft","Button","marginLeft","changeFilter","App","todoListID_1","v1","todoListID_2","todoLists","setTodoLists","setTasks","el","newTitle","tl","taskID","task","newTask","taskId","newIsDoneValue","getTaskForTodoList","todoList","todoListsComponents","Grid","item","Paper","elevation","padding","AppBar","position","Toolbar","justifyContent","edge","aria-label","Menu","Typography","Container","fixed","container","newTodoListID","newTodoList","spacing","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+UAQO,SAASA,EAAYC,GAAyB,IAAD,EAEtBC,oBAAkB,GAFI,mBAEzCC,EAFyC,KAElCC,EAFkC,OAGtBF,mBAAiB,IAHK,mBAGzCG,EAHyC,KAGlCC,EAHkC,KAK1CC,EAAiB,WACnB,IAAMC,EAAeH,EAAMI,OACvBD,EACAP,EAAMS,QAAQF,GAEdJ,GAAS,GAEbE,EAAS,KAcb,OACI,6BACI,kBAACK,EAAA,EAAD,CACIC,KAAM,QACNC,MAAOR,EACPS,WAhBc,SAACC,GACT,UAAVA,EAAEC,KACFT,KAeIU,SAXU,SAACF,GACnBT,EAASS,EAAEG,cAAcL,OACzBT,GAAS,IAUDD,MAAOA,EACPgB,MAAO,QACPC,QAAS,WACTC,WAAYlB,GAAS,sBAEzB,kBAACmB,EAAA,EAAD,CACIC,MAAO,UACPC,QAASjB,GACT,kBAACkB,EAAA,EAAD,QCzCT,SAASC,EAAazB,GAA0B,IAAD,EAExBC,mBAAiBD,EAAMI,OAFC,mBAE3CA,EAF2C,KAEpCC,EAFoC,OAGlBJ,oBAAkB,GAHA,mBAG3CyB,EAH2C,KAGjCC,EAHiC,KAiBlD,OACID,EACM,kBAAChB,EAAA,EAAD,CACEM,SAfU,SAACF,GACnBT,EAASS,EAAEG,cAAcL,QAejBA,MAAOR,EACPwB,OAVQ,WAChBD,GAAY,GACZ3B,EAAM6B,YAAYzB,IASV0B,WAAS,IAEX,0BAAMC,cAhBG,WACfJ,GAAY,KAe4B3B,EAAMI,O,+BCZ/C,SAAS4B,EAAShC,GAA2B,IAEzCiC,EAAUjC,EAAViC,OAeDC,EAAQlC,EAAMkC,MAAMC,KAAI,SAAAC,GAS1B,OACI,wBAAIrB,IAAKqB,EAAEC,GAAIC,UAAWF,EAAEG,OAAS,UAAY,IAC7C,kBAACC,EAAA,EAAD,CACIC,QAASL,EAAEG,OACXvB,SAVY,SAACF,GAAD,OAAsCd,EAAM0C,iBAAiBN,EAAEC,GAAIvB,EAAEG,cAAcwB,QAASzC,EAAM2C,aAW9GrB,MAAO,YAEX,kBAACG,EAAD,CACII,YAZY,SAACzB,GACrBJ,EAAM4C,gBAAgBR,EAAEC,GAAIjC,EAAOJ,EAAM2C,aAYjCvC,MAAOgC,EAAEhC,QACb,kBAACiB,EAAA,EAAD,CAAYE,QAlBM,kBAAMvB,EAAM6C,WAAWT,EAAEC,GAAIrC,EAAM2C,cAmBjD,kBAACG,EAAA,EAAD,CAAQxB,MAAM,mBAM9B,OACI,6BACI,6BACI,4BACI,kBAACG,EAAD,CACIrB,MAAOJ,EAAMI,MACbyB,YAvCQ,SAACzB,GACzBJ,EAAM+C,oBAAoB3C,EAAOJ,EAAM2C,eAwC3B,kBAACtB,EAAA,EAAD,CAAYE,QA3CE,kBAAMvB,EAAMgD,eAAehD,EAAM2C,cA4C3C,kBAACG,EAAA,EAAD,CAAQxB,MAAM,gBAGtB,kBAACvB,EAAD,CAAaU,QA1CT,SAACL,GACbJ,EAAMiD,QAAQ7C,EAAOJ,EAAM2C,eA0CnB,wBAAIO,MAAO,CAACC,UAAW,OAAQC,YAAa,MACvClB,GAEL,6BACI,kBAACmB,EAAA,EAAD,CACIH,MAAO,CAACI,WAAY,OACpBhC,MAAO,UACPH,QAAoB,QAAXc,EAAmB,YAAc,WAC1CV,QA5DK,kBAAMvB,EAAMuD,aAAa,MAAOvD,EAAM2C,cAwD/C,OAMA,kBAACU,EAAA,EAAD,CACIH,MAAO,CAACI,WAAY,OACpBhC,MAAO,UACPH,QAAoB,WAAXc,EAAsB,YAAc,WAC7CV,QAjEQ,kBAAMvB,EAAMuD,aAAa,SAAUvD,EAAM2C,cA6DrD,UAMA,kBAACU,EAAA,EAAD,CACIH,MAAO,CAACI,WAAY,OACpBhC,MAAO,UACPH,QAAoB,cAAXc,EAAyB,YAAc,WAChDV,QAtEW,kBAAMvB,EAAMuD,aAAa,YAAavD,EAAM2C,cAkE3D,gB,2ECoFLa,MAvJf,WAAgB,IAAD,EAELC,EAAeC,cACfC,EAAeD,cAHV,EAKuBzD,mBAA8B,CAC5D,CAACoC,GAAIoB,EAAcrD,MAAO,gBAAiB6B,OAAQ,OACnD,CAACI,GAAIsB,EAAcvD,MAAO,cAAe6B,OAAQ,SAP1C,mBAKJ2B,EALI,KAKOC,EALP,OAUe5D,oBAAQ,mBAC7BwD,EAAe,CACZ,CAACpB,GAAIqB,cAAMtD,MAAO,QAASmC,QAAQ,GACnC,CAACF,GAAIqB,cAAMtD,MAAO,KAAMmC,QAAQ,GAChC,CAACF,GAAIqB,cAAMtD,MAAO,OAAQmC,QAAQ,GAClC,CAACF,GAAIqB,cAAMtD,MAAO,MAAOmC,QAAQ,KALP,cAO7BoB,EAAe,CACZ,CAACtB,GAAIqB,cAAMtD,MAAO,OAAQmC,QAAQ,GAClC,CAACF,GAAIqB,cAAMtD,MAAO,OAAQmC,QAAQ,GAClC,CAACF,GAAIqB,cAAMtD,MAAO,QAASmC,QAAQ,GACnC,CAACF,GAAIqB,cAAMtD,MAAO,SAAUmC,QAAQ,KAXV,IAVvB,mBAUJL,EAVI,KAUG4B,EAVH,KAsCX,SAASd,EAAeL,GACpBkB,EAAaD,EAAU3B,QAAO,SAAA8B,GAAE,OAAIA,EAAG1B,KAAOM,aACvCT,EAAMS,GAGjB,SAASI,EAAoBiB,EAAkBrB,GAC3CkB,EAAaD,EAAUzB,KAAI,SAAA8B,GAAE,OAAIA,EAAG5B,KAAOM,EAAV,2BACvBsB,GADuB,IACnB7D,MAAO4D,IACfC,MAGV,SAASpB,EAAWqB,EAAgBvB,GAChCT,EAAMS,GAAcT,EAAMS,GAAYV,QAAO,SAACkC,GAAD,OAAUA,EAAK9B,KAAO6B,KACnEJ,EAAS,eAAI5B,IAGjB,SAASe,EAAQ7C,EAAeuC,GAC5B,IAAMyB,EAAqB,CACvB/B,GAAIqB,cACJtD,QACAmC,QAAQ,GAEZuB,EAAS,2BAAI5B,GAAL,kBAAaS,EAAb,CAA2ByB,GAA3B,mBAAuClC,EAAMS,QAGzD,SAASD,EAAiB2B,EAAgBC,EAAyB3B,GAC/DT,EAAMS,GAAcT,EAAMS,GAAYR,KAAI,SAAAC,GAAC,OACvCA,EAAEC,KAAOgC,EAAT,2BACUjC,GADV,IACaG,OAAQ+B,IACflC,KACV0B,EAAS,eAAI5B,IAGjB,SAASU,EAAgByB,EAAgBL,EAAkBrB,GACvDmB,EAAS,2BACF5B,GADC,kBAEHS,EAAaT,EAAMS,GAAYR,KAAI,SAAAC,GAAC,OACjCA,EAAEC,KAAOgC,EAAT,2BACUjC,GADV,IACahC,MAAO4D,IACd5B,QAIlB,SAASmB,EAAa3C,EAAyB+B,GAC3CkB,EAAaD,EAAUzB,KAAI,SAAA8B,GAAE,OAAIA,EAAG5B,KAAOM,EAAV,2BACvBsB,GADuB,IACnBhC,OAAQrB,IAChBqD,MAGV,SAASM,EAAmBC,GACxB,OAAQA,EAASvC,QACb,IAAK,SACD,OAAOC,EAAMsC,EAASnC,IAAIJ,QAAO,SAAAG,GAAC,OAAKA,EAAEG,UAC7C,IAAK,YACD,OAAOL,EAAMsC,EAASnC,IAAIJ,QAAO,SAAAG,GAAC,OAAIA,EAAEG,UAC5C,QACI,OAAOL,EAAMsC,EAASnC,KAIlC,IAAMoC,EAAsBb,EAAUzB,KAAI,SAAA8B,GAEtC,OACI,kBAACS,EAAA,EAAD,CAAMC,MAAI,EAAC5D,IAAKkD,EAAG5B,IACf,kBAACuC,EAAA,EAAD,CAAOC,UAAW,GAAI3B,MAAO,CAAC4B,QAAS,SACnC,kBAAC9C,EAAD,CACIW,WAAYsB,EAAG5B,GACfW,eAAgBA,EAChBd,MAAOqC,EAAmBN,GAC1B7D,MAAO6D,EAAG7D,MACV6B,OAAQgC,EAAGhC,OACXgB,QAASA,EACTL,gBAAiBA,EACjBF,iBAAkBA,EAClBG,WAAYA,EACZU,aAAcA,EACdR,oBAAqBA,SAQzC,OACI,yBAAKT,UAAU,OACX,kBAACyC,EAAA,EAAD,CAAQC,SAAU,UACd,kBAACC,EAAA,EAAD,CAAS/B,MAAO,CAACgC,eAAgB,kBAC7B,kBAAC7D,EAAA,EAAD,CAAY8D,KAAK,QAAQ7D,MAAM,UAAU8D,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYnE,QAAQ,MAApB,aAGA,kBAACkC,EAAA,EAAD,CACIlC,QAAS,WACTG,MAAM,WAFV,WAKR,kBAACiE,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACd,EAAA,EAAD,CAAMe,WAAS,EAACvC,MAAO,CAAC4B,QAAS,WAC7B,kBAAC/E,EAAD,CAAaU,QAlH7B,SAAqBL,GACjB,IAAMsF,EAAgBhC,cAChBiC,EAA4B,CAC9BtD,GAAIqD,EACJtF,QACA6B,OAAQ,OAEZ4B,EAAa,GAAD,mBAAKD,GAAL,CAAgB+B,KAC5B7B,EAAS,2BACF5B,GADC,kBACOwD,EAAgB,UA2GvB,kBAAChB,EAAA,EAAD,CACIe,WAAS,EAACG,QAAS,EACnB1C,MAAO,CAACgC,eAAgB,iBACvBT,MC9JDoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1G,GACL2G,QAAQ3G,MAAMA,EAAM4G,c","file":"static/js/main.c4974ffd.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\nexport type AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    const [error, setError] = useState<boolean>(false);\r\n    const [title, setTitle] = useState<string>('')\r\n\r\n    const onClickAddItem = () => {\r\n        const trimmedTitle = title.trim();\r\n        if (trimmedTitle) {\r\n            props.addItem(trimmedTitle)\r\n        } else {\r\n            setError(true);\r\n        }\r\n        setTitle('');\r\n    };\r\n\r\n    const onKeyPressAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            onClickAddItem();\r\n        }\r\n    }\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n        setError(false);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                size={'small'}\r\n                value={title}\r\n                onKeyPress={onKeyPressAddItem}\r\n                onChange={onChangeTitle}\r\n                error={error}\r\n                label={'Title'}\r\n                variant={\"outlined\"}\r\n                helperText={error && 'Title is required'}\r\n            />\r\n            <IconButton\r\n                color={'primary'}\r\n                onClick={onClickAddItem}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {useState, ChangeEvent} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\nexport type EditableSpanType = {\r\n    title: string\r\n    changeTitle: (title: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n\r\n    const [title, setTitle] = useState<string>(props.title)\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value);\r\n    }\r\n\r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.changeTitle(title);\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField\r\n                onChange={onChangeTitle}\r\n                value={title}\r\n                onBlur={offEditMode}\r\n                autoFocus\r\n            />\r\n            : <span onDoubleClick={onEditMode}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport {FilterValuesType, TasksType} from \"./App\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    todoListID: string\r\n    tasks: Array<TasksType>\r\n    changeTaskTitle: (taskId: string, title: string, todoListID: string) => void\r\n    deleteTodoList: (todoListID: string) => void\r\n    filter: FilterValuesType\r\n    removeTask: (taskID: string, todoListID: string) => void;\r\n    changeFilter: (value: FilterValuesType, todoListID: string) => void;\r\n    addTask: (title: string, todoListID: string) => void\r\n    changeTaskStatus: (taskId: string, newIsDoneValue: boolean, todoListID: string) => void\r\n    changeTodolistTitle: (newTitle: string, todoListID: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const {filter} = props;\r\n\r\n    const onClickAllFilter = () => props.changeFilter('all', props.todoListID);\r\n    const onClickActiveFilter = () => props.changeFilter('active', props.todoListID);\r\n    const onClickCompletedFilter = () => props.changeFilter('completed', props.todoListID);\r\n\r\n    const onClickDeleteTodoList = () => props.deleteTodoList(props.todoListID);\r\n\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(title, props.todoListID)\r\n    }\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todoListID);\r\n    }\r\n\r\n    const tasks = props.tasks.map(t => {\r\n        const removeTaskHandler = () => props.removeTask(t.id, props.todoListID);\r\n\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => props.changeTaskStatus(t.id, e.currentTarget.checked, props.todoListID);\r\n\r\n        const changeTaskTitle = (title: string) => {\r\n            props.changeTaskTitle(t.id, title, props.todoListID);\r\n        }\r\n\r\n        return (\r\n            <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                <Checkbox\r\n                    checked={t.isDone}\r\n                    onChange={onChangeHandler}\r\n                    color={'primary'}\r\n                />\r\n                <EditableSpan\r\n                    changeTitle={changeTaskTitle}\r\n                    title={t.title}/>\r\n                <IconButton onClick={removeTaskHandler}>\r\n                    <Delete color=\"secondary\"/>\r\n                </IconButton>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <h3>\r\n                    <EditableSpan\r\n                        title={props.title}\r\n                        changeTitle={changeTodolistTitle}\r\n                    />\r\n                    <IconButton onClick={onClickDeleteTodoList}>\r\n                        <Delete color=\"secondary\"/>\r\n                    </IconButton>\r\n                </h3>\r\n                <AddItemForm addItem={addTask}/>\r\n                <ul style={{listStyle: 'none', paddingLeft: '0'}}>\r\n                    {tasks}\r\n                </ul>\r\n                <div>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'all' ? 'contained' : 'outlined'}\r\n                        onClick={onClickAllFilter}>All\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'active' ? 'contained' : 'outlined'}\r\n                        onClick={onClickActiveFilter}>Active\r\n                    </Button>\r\n                    <Button\r\n                        style={{marginLeft: '3px'}}\r\n                        color={\"primary\"}\r\n                        variant={filter === 'completed' ? 'contained' : 'outlined'}\r\n                        onClick={onClickCompletedFilter}>Completed\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from \"./Todolist\";\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\n\r\nexport type TasksType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TasksType>\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nfunction App() {\r\n//BLL:\r\n    const todoListID_1 = v1();\r\n    const todoListID_2 = v1();\r\n\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        {id: todoListID_1, title: 'What to learn', filter: 'all'},\r\n        {id: todoListID_2, title: 'What to bye', filter: 'all'},\r\n    ])\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todoListID_1]: [\r\n            {id: v1(), title: 'React', isDone: false},\r\n            {id: v1(), title: 'JS', isDone: false},\r\n            {id: v1(), title: 'HTML', isDone: false},\r\n            {id: v1(), title: 'CSS', isDone: false},\r\n        ],\r\n        [todoListID_2]: [\r\n            {id: v1(), title: 'Milk', isDone: false},\r\n            {id: v1(), title: 'Salt', isDone: false},\r\n            {id: v1(), title: 'Bread', isDone: false},\r\n            {id: v1(), title: 'Butter', isDone: false},\r\n        ]\r\n    })\r\n\r\n    function addTodoList(title: string) {\r\n        const newTodoListID = v1();\r\n        const newTodoList: TodoListType = {\r\n            id: newTodoListID,\r\n            title,\r\n            filter: 'all',\r\n        }\r\n        setTodoLists([...todoLists, newTodoList])\r\n        setTasks({\r\n            ...tasks, [newTodoListID]: []\r\n        })\r\n    }\r\n\r\n    function deleteTodoList(todoListID: string) {\r\n        setTodoLists(todoLists.filter(el => el.id !== todoListID))\r\n        delete tasks[todoListID];\r\n    }\r\n\r\n    function changeTodolistTitle(newTitle: string, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID\r\n            ? {...tl, title: newTitle}\r\n            : tl))\r\n    }\r\n\r\n    function removeTask(taskID: string, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].filter((task) => task.id !== taskID);\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask: TasksType = {\r\n            id: v1(),\r\n            title,\r\n            isDone: false\r\n        }\r\n        setTasks({...tasks, [todoListID]: [newTask, ...tasks[todoListID]]});\r\n    }\r\n\r\n    function changeTaskStatus(taskId: string, newIsDoneValue: boolean, todoListID: string) {\r\n        tasks[todoListID] = tasks[todoListID].map(t =>\r\n            t.id === taskId\r\n                ? {...t, isDone: newIsDoneValue}\r\n                : t)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTaskTitle(taskId: string, newTitle: string, todoListID: string) {\r\n        setTasks({\r\n            ...tasks,\r\n            [todoListID]: tasks[todoListID].map(t =>\r\n                t.id === taskId\r\n                    ? {...t, title: newTitle}\r\n                    : t)\r\n        })\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListID: string) {\r\n        setTodoLists(todoLists.map(tl => tl.id === todoListID\r\n            ? {...tl, filter: value}\r\n            : tl))\r\n    }\r\n\r\n    function getTaskForTodoList(todoList: TodoListType) {\r\n        switch (todoList.filter) {\r\n            case 'active':\r\n                return tasks[todoList.id].filter(t => !t.isDone);\r\n            case 'completed':\r\n                return tasks[todoList.id].filter(t => t.isDone);\r\n            default:\r\n                return tasks[todoList.id];\r\n        }\r\n    }\r\n\r\n    const todoListsComponents = todoLists.map(tl => {\r\n\r\n        return (\r\n            <Grid item key={tl.id}>\r\n                <Paper elevation={20} style={{padding: '15px'}}>\r\n                    <Todolist\r\n                        todoListID={tl.id}\r\n                        deleteTodoList={deleteTodoList}\r\n                        tasks={getTaskForTodoList(tl)}\r\n                        title={tl.title}\r\n                        filter={tl.filter}\r\n                        addTask={addTask}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        removeTask={removeTask}\r\n                        changeFilter={changeFilter}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        )\r\n    })\r\n\r\n    //UI:\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position={'static'}>\r\n                <Toolbar style={{justifyContent: 'space-between'}}>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        TodoLists\r\n                    </Typography>\r\n                    <Button\r\n                        variant={'outlined'}\r\n                        color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px 0'}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid\r\n                    container spacing={3}\r\n                    style={{justifyContent: 'space-evenly'}}>\r\n                    {todoListsComponents}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}